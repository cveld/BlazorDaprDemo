@using BlazorDaprDemo.Entities
@using BlazorDaprDemo.Models
@using BlazorDaprDemo.Services
@using BlazorServerSide.Models
@inject IConfiguration configuration
@inject NavigationManager NavigationManager
@using Dapr.Client
@using Microsoft.Extensions.Configuration
@using BlazorDaprDemo.Components.Stars
@using BlazorDaprDemo.Components.Rating
@using BlazorDaprDemo.Components.BookForm
@using BlazorDaprDemo.Components.Like
@using OrderModels
@inject IMatDialogService matDialogService
@inject OrdersEventBroker ordersEventBroker
@inject DaprClient daprClient
@implements IDisposable

<div class="vacation">
    <article class="card">
        <header>
            <img src="@ImageUrl" class="card-img-top content">
            <Like Liked="Liked" OnLikeClicked="OnLikeClicked"></Like>
        </header>

        <section class="card-body">
            <header class="card-title mouse-pointer @(vacation.Booked ? "booked" : null)" @onclick="showModal">
                @vacation.Title
                @if (processing) {  
                    <p>
                    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Small" />
                    <span>processing order...</span>
                    </p>
                }
                @if (!String.IsNullOrWhiteSpace(status))
                {
                    <p><b>@status</b></p>
                }
            </header>
            <Rating value="@vacation.Rating"></Rating>
            <Stars amount="vacation.Stars"></Stars>
        </section>

        <footer class="card-footer">
            <span class="price-unit">@vacation.PriceUnit</span>
            <span class="wrapper-price">
                @if (!string.IsNullOrEmpty(vacation.OriginalPrice))
                {
                    <span class="price-orig">€ @vacation.OriginalPrice</span>
                }
                <span class="price">€ @vacation.Price</span>
            </span>
        </footer>
    </article>
</div>

@code {
    [Parameter]
    public VacationModel vacation { get; set; } = new VacationModel();

    [Parameter] public EventCallback OnLikeClicked { get; set; }
    [Parameter] public EventCallback OnBooked { get; set; }

    [Parameter] public bool Liked { get; set; }

    string ImageUrl = string.Empty;

    protected override void OnInitialized()
    {
        var section = configuration.GetSection("VacationImagesBaseUrl");
        var relativeuri = section.Value;
        var absoluteuri = "";
        if (relativeuri.StartsWith("~"))
        {
            absoluteuri = NavigationManager.BaseUri + relativeuri.Substring(2) + vacation.ImageUrl;
        }
        else
        {
            absoluteuri = relativeuri;
        }
        ImageUrl = absoluteuri;
    }

    async Task showModal2()
    {
        status = "";
        processing = false;
        await PlaceOrder(vacation.ID);
    }
    async Task showModal()
    {
        status = "";
        var result = await matDialogService.OpenAsync(typeof(BookForm), new MatDialogOptions
        {
            Attributes = new Dictionary<string, object>
            {
                {"VacationModel", vacation}
            }
        }) as DialogResult<BookedEventModel>;     
        if (result?.Result == ModalResult.Ok)
        {
            await PlaceOrder(vacation.ID);
            await OnBooked.InvokeAsync(result.Data);
        }
    }

    bool processing;
    private CancellationTokenSource? cts;
    string status = string.Empty;

    async Task PlaceOrder(int vacationid)
    {
        if (processing)
        {
            return;
        }

        try
        {
            processing = true;

            var orderId = Guid.NewGuid().ToString();
            cts = new CancellationTokenSource();

            var task = ordersEventBroker.GetOrderConfirmationAsync(orderId, cts.Token);

            await daprClient.PublishEventAsync(OrderApiConsts.DaprPubSub, OrderApiConsts.OrderPlacedTopic, new Order()
            {
                VacationId = vacationid,
                OrderId = orderId,
            });

            var confirmation = await task;
            if (confirmation.Confirmed)
            {
                status = $"Booked!";
            }
            else
            {
                status = $"Sorry, we're sold out of that.";
            }
        }
        finally
        {
            processing = false;
            cts?.Dispose();
            cts = null;
        }
    }

    public void Dispose()
    {
        cts?.Dispose();
    }
}
